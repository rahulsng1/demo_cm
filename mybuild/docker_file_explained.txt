Dockerfile is a simple ASCII text file consisting of a single file with a DSL that has a handful of instructions. The format looks like this:

# Comment
INSTRUCTION arguments

The following table summarizes the instructions; many of these options map directly to option in the "docker run" command:
Command 	Description
ADD 	Copies a file from the host system onto the container
CMD 	The command that runs when the container starts
ENTRYPOINT
ENV 	Sets an environment variable in the new container
EXPOSE 	Opens a port for linked containers
FROM 	The base image to use in the build. This is mandatory and must be the first command in the file.
MAINTAINER 	An optional value for the maintainer of the script
ONBUILD 	A command that is triggered when the image in the Dcokerfile is used as a base for another image
RUN 	Executes a command and save the result as a new layer
USER 	Sets the default user within the container
VOLUME 	Creates a shared volume that can be shared among containers or by the host machine
WORKDIR 	Set the default working directory for the container

Once you've created a Dockerfile and added all your instructions, you can use it to build an image using the docker build command. The format for this command is:

docker build [OPTIONS] PATH | URL | -

The build command results in a new image that you can start using docker run, just like any other image. Each line in the Dockerfile will correspond to a layer in the images' commit history.

To build a simple image to host LAMP services in acontainer is added in the repo

# cd 

# docker build --tag <name of the image> .

After the image is build, logon to the docker registry by creating a username and password thre from the browser.
Once your login is created run the following commands

# docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: ajoybharath
Password: 
Login Succeeded

# docker tag <name of image> <docker login name>/<name of image>:<version or latest>

# docker push <docker login name>/<name of image>:<version or latest>

For your reference I'm using the steps I used to push my image named my-pythonapp to docker hub

# docker build --tag my-pythonapp .

# docker tag my-pythonapp ajoybharath/my-pythonapp:v1.0

# docker images
REPOSITORY                                                      TAG                 IMAGE ID            CREATED             SIZE
ajoybharath/my-pythonapp                                        v1.0                ab404d7c4662        About an hour ago   53.1MB

# docker push ajoybharath/my-pythonapp:v1.0
The push refers to repository [docker.io/ajoybharath/my-pythonapp]
8a2f62d1a737: Pushed 
c829bf92f0bb: Pushed 
0dc427139be3: Pushed 
ca9cd6780091: Pushed 

Verify this from your docker hub account

https://hub.docker.com/r/ajoybharath/my-pythonapp/

if you want to test this please do the following

# docker pull ajoybharath/my-pythonapp:v1.0
Trying to pull repository docker.io/ajoybharath/my-pythonapp ... 
v1.0: Pulling from docker.io/ajoybharath/my-pythonapp
Digest: sha256:395e1e5f73ea575572acafa29216b0631efe0c32329e5af53a56ea6e9df07ddc
Status: Image is up to date for ajoybharath/my-pythonapp:v1.0

# docker run --publish=8000:8000 -d my-pythonapp
3ee7b5b48e93f404615c67f5f49faea3f97d23ec3ecba9e730cbe2e1954c8802

Once ran execute curl to the exposed port on to localhost to test the app

# curl http://localhost:8000